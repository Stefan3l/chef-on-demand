generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chef {
  id                Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  bio               String?   @db.Text
  phone             String?
  profileImage      String?
  previewUrl        String?   @unique
  email             String    @unique
  password          String
  resetToken        String? 
  city              String?
  latitude          Float?
  longitude         Float?
  radiusKm          Int?
  language          String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())

  dish      Dish[]
  menus     Menu[]
  messages  Message[]
  details      ChefDetails?
}

model ChefDetails {
  id           Int     @id @default(autoincrement())
  story        String? // Parlo della mia cucina
  startCooking String? // Come ho iniziato a cucinare
  secret       String? // Un mio segreto

  chefId       Int     @unique
  chef         Chef    @relation(fields: [chefId], references: [id])
}


model Dish {
  id         Int        @id @default(autoincrement())
  url        String?    // optional
  name       String?    // optional 
  category   String?    // optional
  chefId     Int
  chef       Chef       @relation(fields: [chefId], references: [id])
  createdAt  DateTime   @default(now())
}

model Menu {
  id             Int           @id @default(autoincrement())
  name           String
  description    String?
  pricePerPerson Float
  minGuests      Int
  maxGuests      Int
  createdAt      DateTime      @default(now())

  chefId         Int
  chef           Chef          @relation(fields: [chefId], references: [id])

  items          MenuItem[]    // felurile de m√¢ncare proprii meniului
}

model MenuItem {
  id         Int      @id @default(autoincrement())
  name       String   // Numele felului
  category   String   // Antipasto, Primo, etc.
  type       String?  // All Inclusive, 1, 2, 3, 4
  order      Int       @default(0)
  menuId     Int
  menu       Menu     @relation(fields: [menuId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  fromName  String
  fromEmail String
  content   String
  fromChef  Boolean   @default(false)
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())

  chefId    Int
  chef      Chef      @relation(fields: [chefId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
